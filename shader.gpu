// Vertex shader
const vertexShaderSource = `
attribute vec3 vertex;
attribute vec3 normal;
attribute vec2 texture;
uniform mat4 ModelViewProjectionMatrix, normalMat;
varying vec3 normalInterp;
varying vec2 textureInterp;
varying vec3 vertPos;

uniform float angle;
uniform vec2 textureTranslation;


mat4 translation(vec3 t) {
    mat4 dst;

    dst[0][0] = 1.0;
    dst[0][ 1] = 0.0;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = 0.0;
    dst[1][ 1] = 1.0;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = t.x;
    dst[3][ 1] = t.y;
    dst[3][ 2] = t.z;
    dst[3][ 3] = 1.0;

    return dst;
}

mat4 rotation(float angleInRadians) {
    mat4 dst;
    float c = cos(angleInRadians);
    float s = sin(angleInRadians);

    dst[0][0] = c;
    dst[0][ 1] = s;
    dst[0][ 2] = 0.0;
    dst[0][ 3] = 0.0;
    dst[1][ 0] = -s;
    dst[1][ 1] = c;
    dst[1][ 2] = 0.0;
    dst[1][ 3] = 0.0;
    dst[2][ 0] = 0.0;
    dst[2][ 1] = 0.0;
    dst[2][ 2] = 1.0;
    dst[2][ 3] = 0.0;
    dst[3][ 0] = 0.0;
    dst[3][ 1] = 0.0;
    dst[3][ 2] = 0.0;
    dst[3][ 3] = 1.0;

    return dst;
}


void main() {
    vec4 vert1 = translation(vec3(-textureTranslation,0.0))*vec4(texture,0.,1.);
    vec4 vert2 = rotation(angle)*vert1;
    vec4 vert3 = translation(vec3(textureTranslation,0.0))*vert2;

    textureInterp = vert3.xy;
    normalInterp = vec3(normalMat * vec4(normal, 0.0));
    gl_Position = ModelViewProjectionMatrix * vec4(vertex, 1.0);
}
`;

// Fragment shader
const fragmentShaderSource = `
#ifdef GL_FRAGMENT_PRECISION_HIGH
   precision highp float;
#else
   precision mediump float;
#endif

uniform vec4 color;
varying vec3 normalInterp;
varying vec3 vertPos;

uniform vec3 diffuseColor;

varying vec2 textureInterp;
uniform sampler2D tmu;
uniform float angle;

void main() {
    vec4 C = texture2D(tmu,textureInterp);
    vec3 N = normalize(normalInterp);
    vec3 lightDir = vec3(1.0, 1.0, 1.0);

    // Lambert's cosine law
    float lambertian = max(dot(N, lightDir), 0.0);
    float specular = 0.0;
    if (lambertian > 0.0) {
        vec3 R = reflect(-lightDir, N);      // Reflected light vector
        vec3 V = normalize(-vertPos); // Vector to viewer
        // Compute the specular term
        float specAngle = max(dot(R, V), 0.0);
        specular = pow(specAngle, 10.0);
    }
    vec3 ambientColor = 0.2 * diffuseColor;
    vec3 specularColor = vec3(1);
    gl_FragColor = vec4(ambientColor + lambertian * diffuseColor + specular * specularColor, 1.0);
    gl_FragColor = C;
    if(angle<-5.0){
        gl_FragColor = vec4(diffuseColor,1.0);
    }
}
`;